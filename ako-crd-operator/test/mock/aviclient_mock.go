// Code generated by MockGen. DO NOT EDIT.
// Source: aviclient.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	session "github.com/vmware/alb-sdk/go/session"
)

// MockAviClientInterface is a mock of AviClientInterface interface.
type MockAviClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAviClientInterfaceMockRecorder
}

// MockAviClientInterfaceMockRecorder is the mock recorder for MockAviClientInterface.
type MockAviClientInterfaceMockRecorder struct {
	mock *MockAviClientInterface
}

// NewMockAviClientInterface creates a new mock instance.
func NewMockAviClientInterface(ctrl *gomock.Controller) *MockAviClientInterface {
	mock := &MockAviClientInterface{ctrl: ctrl}
	mock.recorder = &MockAviClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAviClientInterface) EXPECT() *MockAviClientInterfaceMockRecorder {
	return m.recorder
}

// AviSessionDelete mocks base method.
func (m *MockAviClientInterface) AviSessionDelete(url string, request, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AviSessionDelete", url, request, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// AviSessionDelete indicates an expected call of AviSessionDelete.
func (mr *MockAviClientInterfaceMockRecorder) AviSessionDelete(url, request, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AviSessionDelete", reflect.TypeOf((*MockAviClientInterface)(nil).AviSessionDelete), url, request, response)
}

// AviSessionGet mocks base method.
func (m *MockAviClientInterface) AviSessionGet(url string, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AviSessionGet", url, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// AviSessionGet indicates an expected call of AviSessionGet.
func (mr *MockAviClientInterfaceMockRecorder) AviSessionGet(url, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AviSessionGet", reflect.TypeOf((*MockAviClientInterface)(nil).AviSessionGet), url, response)
}

// AviSessionGetCollectionRaw mocks base method.
func (m *MockAviClientInterface) AviSessionGetCollectionRaw(url string, params ...session.ApiOptionsParams) (session.AviCollectionResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{url}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AviSessionGetCollectionRaw", varargs...)
	ret0, _ := ret[0].(session.AviCollectionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AviSessionGetCollectionRaw indicates an expected call of AviSessionGetCollectionRaw.
func (mr *MockAviClientInterfaceMockRecorder) AviSessionGetCollectionRaw(url interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{url}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AviSessionGetCollectionRaw", reflect.TypeOf((*MockAviClientInterface)(nil).AviSessionGetCollectionRaw), varargs...)
}

// AviSessionPost mocks base method.
func (m *MockAviClientInterface) AviSessionPost(url string, request, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AviSessionPost", url, request, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// AviSessionPost indicates an expected call of AviSessionPost.
func (mr *MockAviClientInterfaceMockRecorder) AviSessionPost(url, request, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AviSessionPost", reflect.TypeOf((*MockAviClientInterface)(nil).AviSessionPost), url, request, response)
}

// AviSessionPut mocks base method.
func (m *MockAviClientInterface) AviSessionPut(url string, request, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AviSessionPut", url, request, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// AviSessionPut indicates an expected call of AviSessionPut.
func (mr *MockAviClientInterfaceMockRecorder) AviSessionPut(url, request, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AviSessionPut", reflect.TypeOf((*MockAviClientInterface)(nil).AviSessionPut), url, request, response)
}

// GetAviSession mocks base method.
func (m *MockAviClientInterface) GetAviSession() *session.AviSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAviSession")
	ret0, _ := ret[0].(*session.AviSession)
	return ret0
}

// GetAviSession indicates an expected call of GetAviSession.
func (mr *MockAviClientInterfaceMockRecorder) GetAviSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAviSession", reflect.TypeOf((*MockAviClientInterface)(nil).GetAviSession))
}
