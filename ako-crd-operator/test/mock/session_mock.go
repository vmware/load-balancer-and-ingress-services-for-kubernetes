// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/vmware/load-balancer-and-ingress-services-for-kubernetes/pkg/utils"
)

// MockAviRestClientPoolFactory is a mock of AviRestClientPoolFactory interface.
type MockAviRestClientPoolFactory struct {
	ctrl     *gomock.Controller
	recorder *MockAviRestClientPoolFactoryMockRecorder
}

// MockAviRestClientPoolFactoryMockRecorder is the mock recorder for MockAviRestClientPoolFactory.
type MockAviRestClientPoolFactoryMockRecorder struct {
	mock *MockAviRestClientPoolFactory
}

// NewMockAviRestClientPoolFactory creates a new mock instance.
func NewMockAviRestClientPoolFactory(ctrl *gomock.Controller) *MockAviRestClientPoolFactory {
	mock := &MockAviRestClientPoolFactory{ctrl: ctrl}
	mock.recorder = &MockAviRestClientPoolFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAviRestClientPoolFactory) EXPECT() *MockAviRestClientPoolFactoryMockRecorder {
	return m.recorder
}

// NewAviRestClientPool mocks base method.
func (m *MockAviRestClientPoolFactory) NewAviRestClientPool(numClients int, ctrlUsername, ctrlPassword, ctrlAuthToken, controllerVersion, ctrlIpAddress, ctrlCAData, tenant, protocol string, userHeaders map[string]string) (*utils.AviRestClientPool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAviRestClientPool", numClients, ctrlUsername, ctrlPassword, ctrlAuthToken, controllerVersion, ctrlIpAddress, ctrlCAData, tenant, protocol, userHeaders)
	ret0, _ := ret[0].(*utils.AviRestClientPool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewAviRestClientPool indicates an expected call of NewAviRestClientPool.
func (mr *MockAviRestClientPoolFactoryMockRecorder) NewAviRestClientPool(numClients, ctrlUsername, ctrlPassword, ctrlAuthToken, controllerVersion, ctrlIpAddress, ctrlCAData, tenant, protocol, userHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAviRestClientPool", reflect.TypeOf((*MockAviRestClientPoolFactory)(nil).NewAviRestClientPool), numClients, ctrlUsername, ctrlPassword, ctrlAuthToken, controllerVersion, ctrlIpAddress, ctrlCAData, tenant, protocol, userHeaders)
}
