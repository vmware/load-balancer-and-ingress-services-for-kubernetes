// @AI-Generated
// [Generated by Cursor claude-4-sonnet]
package session

import (
	"context"
	"errors"
	"os"
	"sync"
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	"github.com/vmware/load-balancer-and-ingress-services-for-kubernetes/ako-crd-operator/internal/event"
	"github.com/vmware/load-balancer-and-ingress-services-for-kubernetes/ako-crd-operator/test/mock"
	"github.com/vmware/load-balancer-and-ingress-services-for-kubernetes/internal/lib"
	"github.com/vmware/load-balancer-and-ingress-services-for-kubernetes/pkg/utils"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes"
	kubefake "k8s.io/client-go/kubernetes/fake"
)

// createFakeK8sClient creates a fake kubernetes client for testing
func createFakeK8sClient(objects ...runtime.Object) kubernetes.Interface {
	return kubefake.NewSimpleClientset(objects...)
}

func TestNewSession(t *testing.T) {
	eventManager := &event.EventManager{}
	k8sClient := createFakeK8sClient()

	session := NewSession(k8sClient, eventManager)

	assert.NotNil(t, session)
	assert.NotNil(t, session.sync)
	assert.Equal(t, utils.AVIAPI_INITIATING, session.status)
	assert.Equal(t, k8sClient, session.k8sClient)
	assert.Equal(t, eventManager, session.eventManager)
	assert.NotNil(t, session.ctrlProperties)
	assert.NotNil(t, session.aviRestClientPoolFactory)
}

func TestPopulateControllerProperties(t *testing.T) {
	tests := []struct {
		name        string
		setupSecret func() *corev1.Secret
		wantErr     bool
		wantProps   map[string]string
	}{
		{
			name: "success: populate properties from secret",
			setupSecret: func() *corev1.Secret {
				return &corev1.Secret{
					ObjectMeta: metav1.ObjectMeta{
						Name:      "avi-secret",
						Namespace: utils.GetAKONamespace(),
					},
					Data: map[string][]byte{
						"username":                 []byte("admin"),
						"password":                 []byte("password123"),
						"authtoken":                []byte("token123"),
						"certificateAuthorityData": []byte("ca-data"),
					},
				}
			},
			wantErr: false,
			wantProps: map[string]string{
				utils.ENV_CTRL_USERNAME:  "admin",
				utils.ENV_CTRL_PASSWORD:  "password123",
				utils.ENV_CTRL_AUTHTOKEN: "token123",
				utils.ENV_CTRL_CADATA:    "ca-data",
			},
		},
		{
			name: "error: secret not found",
			setupSecret: func() *corev1.Secret {
				return nil // No secret
			},
			wantErr:   true,
			wantProps: nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var k8sClient kubernetes.Interface
			if tt.setupSecret() != nil {
				k8sClient = createFakeK8sClient(tt.setupSecret())
			} else {
				k8sClient = createFakeK8sClient()
			}

			eventManager := &event.EventManager{}
			session := NewSession(k8sClient, eventManager)

			err := session.PopulateControllerProperties(context.Background())

			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
				for key, expectedValue := range tt.wantProps {
					assert.Equal(t, expectedValue, session.ctrlProperties[key])
				}
			}
		})
	}
}

func TestCreateAviClients(t *testing.T) {
	tests := []struct {
		name              string
		ctrlProperties    map[string]string
		setupControllerIP func()
		setupEnv          func() func() // Setup function that returns cleanup function
		prepareMock       func(*mock.MockAviRestClientPoolFactory)
		wantStatus        string
		wantVersion       string
		wantErr           bool
		wantClientPool    bool
	}{
		{
			name: "success: create clients with password",
			ctrlProperties: map[string]string{
				utils.ENV_CTRL_USERNAME:  "admin",
				utils.ENV_CTRL_PASSWORD:  "password123",
				utils.ENV_CTRL_AUTHTOKEN: "",
				utils.ENV_CTRL_CADATA:    "ca-data",
			},
			setupControllerIP: func() { lib.SetControllerIP("10.1.1.1") },
			prepareMock: func(mockFactory *mock.MockAviRestClientPoolFactory) {
				mockClientPool := &utils.AviRestClientPool{}
				mockFactory.EXPECT().NewAviRestClientPool(
					1, "10.1.1.1", "admin", "password123", "", "", "ca-data", "", "", nil,
				).Return(mockClientPool, "20.1.1", nil)
			},
			wantStatus:     utils.AVIAPI_CONNECTED,
			wantVersion:    "20.1.1",
			wantClientPool: true,
		},
		{
			name: "success: create clients with auth token",
			ctrlProperties: map[string]string{
				utils.ENV_CTRL_USERNAME:  "admin",
				utils.ENV_CTRL_PASSWORD:  "",
				utils.ENV_CTRL_AUTHTOKEN: "token123",
				utils.ENV_CTRL_CADATA:    "ca-data",
			},
			setupControllerIP: func() { lib.SetControllerIP("10.1.1.1") },
			prepareMock: func(mockFactory *mock.MockAviRestClientPoolFactory) {
				mockClientPool := &utils.AviRestClientPool{}
				mockFactory.EXPECT().NewAviRestClientPool(
					1, "10.1.1.1", "admin", "", "token123", "", "ca-data", "", "", nil,
				).Return(mockClientPool, "20.1.1", nil)
			},
			wantStatus:     utils.AVIAPI_CONNECTED,
			wantVersion:    "20.1.1",
			wantClientPool: true,
		},
		{
			name: "success: create clients from environment variables",
			ctrlProperties: map[string]string{
				utils.ENV_CTRL_USERNAME:  "admin",
				utils.ENV_CTRL_PASSWORD:  "password123",
				utils.ENV_CTRL_AUTHTOKEN: "",
				utils.ENV_CTRL_CADATA:    "ca-data",
			},
			setupControllerIP: func() { lib.SetControllerIP("") }, // Clear to read from env
			setupEnv: func() func() {
				os.Setenv(utils.ENV_CTRL_IPADDRESS, "192.168.1.100")
				return func() { os.Unsetenv(utils.ENV_CTRL_IPADDRESS) }
			},
			prepareMock: func(mockFactory *mock.MockAviRestClientPoolFactory) {
				mockClientPool := &utils.AviRestClientPool{}
				mockFactory.EXPECT().NewAviRestClientPool(
					1, "192.168.1.100", "admin", "password123", "", "", "ca-data", "", "", nil,
				).Return(mockClientPool, "20.1.1", nil)
			},
			wantStatus:     utils.AVIAPI_CONNECTED,
			wantVersion:    "20.1.1",
			wantClientPool: true,
		},
		{
			name: "error: factory returns error",
			ctrlProperties: map[string]string{
				utils.ENV_CTRL_USERNAME:  "admin",
				utils.ENV_CTRL_PASSWORD:  "password123",
				utils.ENV_CTRL_AUTHTOKEN: "",
				utils.ENV_CTRL_CADATA:    "ca-data",
			},
			setupControllerIP: func() { lib.SetControllerIP("10.1.1.1") },
			prepareMock: func(mockFactory *mock.MockAviRestClientPoolFactory) {
				mockFactory.EXPECT().NewAviRestClientPool(
					1, "10.1.1.1", "admin", "password123", "", "", "ca-data", "", "", nil,
				).Return(nil, "", errors.New("connection failed"))
			},
			wantStatus:     utils.AVIAPI_DISCONNECTED,
			wantClientPool: false,
		},
		{
			name: "error: missing username",
			ctrlProperties: map[string]string{
				utils.ENV_CTRL_USERNAME:  "",
				utils.ENV_CTRL_PASSWORD:  "password123",
				utils.ENV_CTRL_AUTHTOKEN: "",
				utils.ENV_CTRL_CADATA:    "ca-data",
			},
			setupControllerIP: func() { lib.SetControllerIP("10.1.1.1") },
			// Note: This test relies on log.Fatalf which would exit in production
		},
		{
			name: "error: missing password and auth token",
			ctrlProperties: map[string]string{
				utils.ENV_CTRL_USERNAME:  "admin",
				utils.ENV_CTRL_PASSWORD:  "",
				utils.ENV_CTRL_AUTHTOKEN: "",
				utils.ENV_CTRL_CADATA:    "ca-data",
			},
			setupControllerIP: func() { lib.SetControllerIP("10.1.1.1") },
			// Note: This test relies on log.Fatalf which would exit in production
		},
		{
			name: "error: missing controller IP",
			ctrlProperties: map[string]string{
				utils.ENV_CTRL_USERNAME:  "admin",
				utils.ENV_CTRL_PASSWORD:  "password123",
				utils.ENV_CTRL_AUTHTOKEN: "",
				utils.ENV_CTRL_CADATA:    "ca-data",
			},
			setupControllerIP: func() { lib.SetControllerIP("") },
			// Note: This test relies on log.Fatalf which would exit in production
		},
		{
			name: "error: empty controller IP from environment",
			ctrlProperties: map[string]string{
				utils.ENV_CTRL_USERNAME:  "admin",
				utils.ENV_CTRL_PASSWORD:  "password123",
				utils.ENV_CTRL_AUTHTOKEN: "",
				utils.ENV_CTRL_CADATA:    "ca-data",
			},
			setupControllerIP: func() { lib.SetControllerIP("") },
			setupEnv: func() func() {
				os.Setenv(utils.ENV_CTRL_IPADDRESS, "")
				return func() { os.Unsetenv(utils.ENV_CTRL_IPADDRESS) }
			},
			// Note: This test relies on log.Fatalf which would exit in production
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Setup environment if needed
			var cleanup func()
			if tt.setupEnv != nil {
				cleanup = tt.setupEnv()
				defer cleanup()
			}

			// Setup controller IP
			if tt.setupControllerIP != nil {
				tt.setupControllerIP()
			}

			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			var mockFactory *mock.MockAviRestClientPoolFactory
			var aviRestClientPoolFactory AviRestClientPoolFactory

			if tt.prepareMock != nil {
				mockFactory = mock.NewMockAviRestClientPoolFactory(ctrl)
				tt.prepareMock(mockFactory)
				aviRestClientPoolFactory = mockFactory
			} else {
				aviRestClientPoolFactory = &AviRestClientPoolFactoryImpl{}
			}

			k8sClient := createFakeK8sClient()
			eventManager := &event.EventManager{}

			session := &Session{
				sync:                     &sync.Mutex{},
				aviRestClientPoolFactory: aviRestClientPoolFactory,
				ctrlProperties:           tt.ctrlProperties,
				k8sClient:                k8sClient,
				status:                   utils.AVIAPI_INITIATING,
				eventManager:             eventManager,
				tenant:                   "",
			}

			// Handle fatal errors with defer/recover
			defer func() {
				if r := recover(); r != nil {
					// Expected to panic/exit due to validation errors
				}
			}()

			session.CreateAviClients(context.Background(), 1)

			// Verify results for non-fatal cases
			if tt.wantStatus != "" {
				assert.Equal(t, tt.wantStatus, session.status)
			}
			if tt.wantVersion != "" {
				assert.Equal(t, tt.wantVersion, session.controllerVersion)
			}
			if tt.wantClientPool {
				assert.NotNil(t, session.aviClientPool)
			} else if tt.wantStatus == utils.AVIAPI_DISCONNECTED {
				assert.Nil(t, session.aviClientPool)
			}
		})
	}
}

func TestCreateAviClients_VersionFormats(t *testing.T) {
	testCases := []struct {
		name            string
		returnedVersion string
		expectedVersion string
	}{
		{
			name:            "semantic version",
			returnedVersion: "22.1.3",
			expectedVersion: "22.1.3",
		},
		{
			name:            "version with build",
			returnedVersion: "22.1.3-9005",
			expectedVersion: "22.1.3-9005",
		},
		{
			name:            "simple version",
			returnedVersion: "22.1",
			expectedVersion: "22.1",
		},
		{
			name:            "empty version",
			returnedVersion: "",
			expectedVersion: "",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			mockFactory := mock.NewMockAviRestClientPoolFactory(ctrl)
			k8sClient := createFakeK8sClient()
			eventManager := &event.EventManager{}

			session := &Session{
				sync:                     &sync.Mutex{},
				aviRestClientPoolFactory: mockFactory,
				ctrlProperties: map[string]string{
					utils.ENV_CTRL_USERNAME:  "admin",
					utils.ENV_CTRL_PASSWORD:  "password123",
					utils.ENV_CTRL_AUTHTOKEN: "",
					utils.ENV_CTRL_CADATA:    "ca-data",
				},
				k8sClient:    k8sClient,
				status:       utils.AVIAPI_INITIATING,
				eventManager: eventManager,
				tenant:       "",
			}

			// Set controller IP for testing
			lib.SetControllerIP("10.1.1.1")

			// Mock the factory to return success with specific version
			mockClientPool := &utils.AviRestClientPool{}
			mockFactory.EXPECT().NewAviRestClientPool(
				1, "10.1.1.1", "admin", "password123", "", "", "ca-data", "", "", nil,
			).Return(mockClientPool, tc.returnedVersion, nil)

			session.CreateAviClients(context.Background(), 1)

			// Verify version is set correctly
			assert.Equal(t, tc.expectedVersion, session.controllerVersion)
			assert.Equal(t, utils.AVIAPI_CONNECTED, session.status)
		})
	}
}

func TestUpdateAviClients(t *testing.T) {
	tests := []struct {
		name        string
		setupSecret func() *corev1.Secret
		prepareMock func(*mock.MockAviRestClientPoolFactory)
		wantErr     bool
		wantStatus  string
		wantVersion string
	}{
		{
			name: "success: update clients",
			setupSecret: func() *corev1.Secret {
				return &corev1.Secret{
					ObjectMeta: metav1.ObjectMeta{
						Name:      "avi-secret",
						Namespace: utils.GetAKONamespace(),
					},
					Data: map[string][]byte{
						"username":                 []byte("admin"),
						"password":                 []byte("password123"),
						"authtoken":                []byte(""),
						"certificateAuthorityData": []byte("ca-data"),
					},
				}
			},
			prepareMock: func(mockFactory *mock.MockAviRestClientPoolFactory) {
				mockClientPool := &utils.AviRestClientPool{}
				mockFactory.EXPECT().NewAviRestClientPool(
					2, "10.1.1.1", "admin", "password123", "", "", "ca-data", "", "", nil,
				).Return(mockClientPool, "20.1.1", nil)
			},
			wantErr:     false,
			wantStatus:  utils.AVIAPI_CONNECTED,
			wantVersion: "20.1.1",
		},
		{
			name: "error: populate properties fails",
			setupSecret: func() *corev1.Secret {
				return nil // No secret
			},
			wantErr: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			var k8sClient kubernetes.Interface
			if tt.setupSecret() != nil {
				k8sClient = createFakeK8sClient(tt.setupSecret())
			} else {
				k8sClient = createFakeK8sClient()
			}

			var mockFactory *mock.MockAviRestClientPoolFactory
			var aviRestClientPoolFactory AviRestClientPoolFactory

			if tt.prepareMock != nil {
				mockFactory = mock.NewMockAviRestClientPoolFactory(ctrl)
				tt.prepareMock(mockFactory)
				aviRestClientPoolFactory = mockFactory
			} else {
				aviRestClientPoolFactory = &AviRestClientPoolFactoryImpl{}
			}

			eventManager := &event.EventManager{}

			session := &Session{
				sync:                     &sync.Mutex{},
				aviRestClientPoolFactory: aviRestClientPoolFactory,
				ctrlProperties:           make(map[string]string),
				k8sClient:                k8sClient,
				status:                   utils.AVIAPI_INITIATING,
				eventManager:             eventManager,
				tenant:                   "",
			}

			// Set controller IP for testing
			lib.SetControllerIP("10.1.1.1")

			err := session.UpdateAviClients(context.Background(), 2)

			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
				if tt.wantStatus != "" {
					assert.Equal(t, tt.wantStatus, session.status)
				}
				if tt.wantVersion != "" {
					assert.Equal(t, tt.wantVersion, session.controllerVersion)
				}
			}
		})
	}
}

func TestGetAviClients(t *testing.T) {
	tests := []struct {
		name           string
		aviClientPool  *utils.AviRestClientPool
		expectedResult *utils.AviRestClientPool
	}{
		{
			name:           "return existing client pool",
			aviClientPool:  &utils.AviRestClientPool{},
			expectedResult: &utils.AviRestClientPool{},
		},
		{
			name:           "return nil when no client pool",
			aviClientPool:  nil,
			expectedResult: nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			session := &Session{
				aviClientPool: tt.aviClientPool,
			}

			result := session.GetAviClients()
			assert.Equal(t, tt.expectedResult, result)
		})
	}
}

func TestCreateAviClients_ConcurrentAccess(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockFactory := mock.NewMockAviRestClientPoolFactory(ctrl)
	k8sClient := createFakeK8sClient()
	eventManager := &event.EventManager{}

	session := &Session{
		sync:                     &sync.Mutex{},
		aviRestClientPoolFactory: mockFactory,
		ctrlProperties: map[string]string{
			utils.ENV_CTRL_USERNAME:  "admin",
			utils.ENV_CTRL_PASSWORD:  "password123",
			utils.ENV_CTRL_AUTHTOKEN: "",
			utils.ENV_CTRL_CADATA:    "ca-data",
		},
		k8sClient:    k8sClient,
		status:       utils.AVIAPI_INITIATING,
		eventManager: eventManager,
		tenant:       "",
	}

	// Set controller IP for testing
	lib.SetControllerIP("10.1.1.1")

	// Mock the factory to return success multiple times
	mockClientPool1 := &utils.AviRestClientPool{}
	mockClientPool2 := &utils.AviRestClientPool{}

	mockFactory.EXPECT().NewAviRestClientPool(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(mockClientPool1, "20.1.1", nil)
	mockFactory.EXPECT().NewAviRestClientPool(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(mockClientPool2, "20.1.1", nil)

	// Test concurrent access
	var wg sync.WaitGroup
	wg.Add(2)

	go func() {
		defer wg.Done()
		session.CreateAviClients(context.Background(), 1)
	}()

	go func() {
		defer wg.Done()
		session.CreateAviClients(context.Background(), 2)
	}()

	wg.Wait()

	// Should have one of the client pools set
	assert.Equal(t, utils.AVIAPI_CONNECTED, session.status)
	assert.NotNil(t, session.aviClientPool)
}

func TestCreateAviClients_VersionHandling(t *testing.T) {
	tests := []struct {
		name                 string
		initialVersion       string
		factoryReturnError   error
		factoryReturnVersion string
		wantVersion          string
		wantStatus           string
	}{
		{
			name:                 "version set on success",
			initialVersion:       "",
			factoryReturnError:   nil,
			factoryReturnVersion: "22.1.3",
			wantVersion:          "22.1.3",
			wantStatus:           utils.AVIAPI_CONNECTED,
		},
		{
			name:                 "version set even on error",
			initialVersion:       "",
			factoryReturnError:   errors.New("connection failed"),
			factoryReturnVersion: "22.1.3",
			wantVersion:          "22.1.3",
			wantStatus:           utils.AVIAPI_DISCONNECTED,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			mockFactory := mock.NewMockAviRestClientPoolFactory(ctrl)
			k8sClient := createFakeK8sClient()
			eventManager := &event.EventManager{}

			session := &Session{
				sync:                     &sync.Mutex{},
				aviRestClientPoolFactory: mockFactory,
				ctrlProperties: map[string]string{
					utils.ENV_CTRL_USERNAME:  "admin",
					utils.ENV_CTRL_PASSWORD:  "password123",
					utils.ENV_CTRL_AUTHTOKEN: "",
					utils.ENV_CTRL_CADATA:    "ca-data",
				},
				k8sClient:         k8sClient,
				status:            utils.AVIAPI_INITIATING,
				eventManager:      eventManager,
				tenant:            "",
				controllerVersion: tt.initialVersion,
			}

			// Set controller IP for testing
			lib.SetControllerIP("10.1.1.1")

			// Mock the factory
			var mockClientPool *utils.AviRestClientPool
			if tt.factoryReturnError == nil {
				mockClientPool = &utils.AviRestClientPool{}
			}

			mockFactory.EXPECT().NewAviRestClientPool(
				1, "10.1.1.1", "admin", "password123", "", "", "ca-data", "", "", nil,
			).Return(mockClientPool, tt.factoryReturnVersion, tt.factoryReturnError)

			session.CreateAviClients(context.Background(), 1)

			// Verify version and status
			assert.Equal(t, tt.wantVersion, session.controllerVersion)
			assert.Equal(t, tt.wantStatus, session.status)
		})
	}
}
