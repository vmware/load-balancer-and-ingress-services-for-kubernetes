/* 
* Copyright 2022-2023 VMware, Inc.
* All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*   http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// Code generated by a tool; DO NOT EDIT.

package v1alpha2


type AnalyticsPolicy struct {
	FullClientLogs *FullClientLogs `json:"fullClientLogs,omitempty"`
}

type BackendProperties struct {
	AnalyticsPolicy                  *PoolAnalyticsPolicy `json:"analyticsPolicy,omitempty"`
	ApplicationPersistenceProfileRef *string              `json:"applicationPersistenceProfileRef,omitempty"`
	Enabled                          *bool                `json:"enabled,omitempty"`
	HealthMonitorRefs                []string             `json:"healthMonitorRefs,omitempty"`
	LbAlgorithm                      *string              `json:"lbAlgorithm,omitempty"`
	LbAlgorithmConsistentHashHdr     *string              `json:"lbAlgorithmConsistentHashHdr,omitempty"`
	LbAlgorithmHash                  *string              `json:"lbAlgorithmHash,omitempty"`
	MinServersUp                     *uint32              `json:"minServersUp,omitempty"`
	PkiProfileRef                    *string              `json:"pkiProfileRef,omitempty"`
	Port                             *int                 `json:"port"`
	Protocol                         *string              `json:"protocol"`
	SslKeyAndCertificateRef          *string              `json:"sslKeyAndCertificateRef,omitempty"`
	SslProfileRef                    *string              `json:"sslProfileRef,omitempty"`
}

type FullClientLogs struct {
	Duration *uint32 `json:"duration,omitempty"`
	Enabled  *bool   `json:"enabled"`
	Throttle *uint32 `json:"throttle,omitempty"`
}

type JWTValidationParams struct {
	Audience *string `json:"audience"`
}

type OAuthAppSettings struct {
	ClientID     *string     `json:"clientID"`
	ClientSecret *string     `json:"clientSecret"`
	OidcConfig   *OIDCConfig `json:"oidcConfig,omitempty"`
	Scopes       []string    `json:"scopes,omitempty"`
}

type OAuthResourceServer struct {
	AccessType               *string                      `json:"accessType"`
	IntrospectionDataTimeout *int32                       `json:"introspectionDataTimeout,omitempty"`
	JwtParams                *JWTValidationParams         `json:"jwtParams,omitempty"`
	OpaqueTokenParams        *OpaqueTokenValidationParams `json:"opaqueTokenParams,omitempty"`
}

type OAuthSettings struct {
	AppSettings    *OAuthAppSettings    `json:"appSettings,omitempty"`
	AuthProfileRef *string              `json:"authProfileRef"`
	ResourceServer *OAuthResourceServer `json:"resourceServer,omitempty"`
}

type OAuthVSConfig struct {
	CookieName            *string          `json:"cookieName,omitempty"`
	CookieTimeout         *int32           `json:"cookieTimeout,omitempty"`
	LogoutURI             *string          `json:"logoutURI,omitempty"`
	OauthSettings         []*OAuthSettings `json:"oauthSettings,omitempty"`
	PostLogoutRedirectURI *string          `json:"postLogoutRedirectURI,omitempty"`
	RedirectURI           *string          `json:"redirectURI,omitempty"`
}

type OIDCConfig struct {
	OidcEnable *bool `json:"oidcEnable,omitempty"`
	Profile    *bool `json:"profile,omitempty"`
	Userinfo   *bool `json:"userinfo,omitempty"`
}

type OpaqueTokenValidationParams struct {
	ServerID     *string `json:"serverID"`
	ServerSecret *string `json:"serverSecret"`
}

type PerformanceLimits struct {
	MaxConcurrentConnections *int32 `json:"maxConcurrentConnections,omitempty"`
	MaxThroughput            *int32 `json:"maxThroughput,omitempty"`
}

type PoolAnalyticsPolicy struct {
	EnableRealtimeMetrics *bool `json:"enableRealtimeMetrics,omitempty"`
}

type SAMLSPConfig struct {
	AcsIndex                       *int32  `json:"acsIndex,omitempty"`
	AuthnReqAcsType                *string `json:"authnReqAcsType"`
	CookieName                     *string `json:"cookieName,omitempty"`
	CookieTimeout                  *int32  `json:"cookieTimeout,omitempty"`
	EntityID                       *string `json:"entityID"`
	SigningSslKeyAndCertificateRef *string `json:"signingSslKeyAndCertificateRef,omitempty"`
	SingleSignonURL                *string `json:"singleSignonURL"`
	UseIdpSessionTimeout           *bool   `json:"useIdpSessionTimeout,omitempty"`
}

type Service struct {
	EnableSsl *bool   `json:"enableSsl,omitempty"`
	Port      *uint32 `json:"port"`
	Protocol  *string `json:"protocol"`
}

