/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware/load-balancer-and-ingress-services-for-kubernetes/pkg/apis/ako/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SSLKeyAndCertificateLister helps list SSLKeyAndCertificates.
// All objects returned here must be treated as read-only.
type SSLKeyAndCertificateLister interface {
	// List lists all SSLKeyAndCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SSLKeyAndCertificate, err error)
	// SSLKeyAndCertificates returns an object that can list and get SSLKeyAndCertificates.
	SSLKeyAndCertificates(namespace string) SSLKeyAndCertificateNamespaceLister
	SSLKeyAndCertificateListerExpansion
}

// sSLKeyAndCertificateLister implements the SSLKeyAndCertificateLister interface.
type sSLKeyAndCertificateLister struct {
	indexer cache.Indexer
}

// NewSSLKeyAndCertificateLister returns a new SSLKeyAndCertificateLister.
func NewSSLKeyAndCertificateLister(indexer cache.Indexer) SSLKeyAndCertificateLister {
	return &sSLKeyAndCertificateLister{indexer: indexer}
}

// List lists all SSLKeyAndCertificates in the indexer.
func (s *sSLKeyAndCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.SSLKeyAndCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SSLKeyAndCertificate))
	})
	return ret, err
}

// SSLKeyAndCertificates returns an object that can list and get SSLKeyAndCertificates.
func (s *sSLKeyAndCertificateLister) SSLKeyAndCertificates(namespace string) SSLKeyAndCertificateNamespaceLister {
	return sSLKeyAndCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SSLKeyAndCertificateNamespaceLister helps list and get SSLKeyAndCertificates.
// All objects returned here must be treated as read-only.
type SSLKeyAndCertificateNamespaceLister interface {
	// List lists all SSLKeyAndCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SSLKeyAndCertificate, err error)
	// Get retrieves the SSLKeyAndCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SSLKeyAndCertificate, error)
	SSLKeyAndCertificateNamespaceListerExpansion
}

// sSLKeyAndCertificateNamespaceLister implements the SSLKeyAndCertificateNamespaceLister
// interface.
type sSLKeyAndCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SSLKeyAndCertificates in the indexer for a given namespace.
func (s sSLKeyAndCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SSLKeyAndCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SSLKeyAndCertificate))
	})
	return ret, err
}

// Get retrieves the SSLKeyAndCertificate from the indexer for a given namespace and name.
func (s sSLKeyAndCertificateNamespaceLister) Get(name string) (*v1alpha1.SSLKeyAndCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sslkeyandcertificate"), name)
	}
	return obj.(*v1alpha1.SSLKeyAndCertificate), nil
}
